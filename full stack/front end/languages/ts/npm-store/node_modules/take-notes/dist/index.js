"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  allNotes: () => allNotes,
  students: () => students
});
module.exports = __toCommonJS(src_exports);

// src/data.ts
var data = [
  {
    students: [
      {
        studentName: "jayanth",
        gitHub: "BR-Jayanth",
        repo: "take-notes-lib",
        fileName: "Jayanthbr.pdf",
        language: "js",
        topic: "for loop"
      },
      {
        studentName: "Safrin Sara",
        gitHub: "codehero11",
        repo: "new-project",
        fileName: "JAVA.pdf",
        language: "java",
        topic: "int"
      },
      {
        studentName: "Safrin Sara",
        gitHub: "codehero11",
        repo: "new-project",
        fileName: "JAVA.pdf",
        language: "java",
        topic: "int"
      },
      {
        studentName: "Manoj M",
        gitHub: "skylinedude",
        repo: "My-notes",
        fileName: "Java Strings.pdf",
        language: "java",
        topic: "Strings"
      },
      {
        studentName: "Chandan N",
        gitHub: "skylinedude",
        repo: "My-notes",
        fileName: "Abstract in java.pdf",
        language: "java",
        topic: "Abstract Keyword"
      },
      {
        studentName: "Jyothika D",
        gitHub: "jeeeeeva",
        repo: "take-notes-lib",
        fileName: "Data_Types in Javascript.pdf",
        language: "js",
        topic: "Datatypes in javascript"
      },
      {
        studentName: "Sudeep Raj",
        gitHub: "sudeeprajbs",
        repo: "take-notes-lib",
        fileName: "hoisting_by_sudeep.pdf",
        language: "js",
        topic: "Hoisting"
      },
      {
        studentName: "Rakesh D K",
        gitHub: "Rocky-1999",
        repo: "take-notes-lib",
        fileName: "hosting.pdf",
        language: "js",
        topic: "Hoisting"
      },
      {
        studentName: "pujitha",
        gitHub: "1pujitha",
        repo: "take-notes-lib",
        fileName: "pujitha-pdf.pdf",
        language: "js",
        topic: "const"
      },
      {
        studentName: "Prathap.K",
        gitHub: "Iam-Prathap",
        repo: "take-notes-lib",
        fileName: "JAVASCRIPT-STRINGS.pdf",
        language: "js",
        topic: "Strings"
      },
      {
        studentName: "Sudarshana B U",
        gitHub: "Sudarshana-17",
        repo: "take-notes-lib",
        fileName: "Let-Keyword.pdf",
        language: "js",
        topic: "Let keyword"
      }
    ]
  }
];

// src/allNotes.ts
var base = `https://cdn.jsdelivr.net/gh`;
var urlBulder = `${base}`;
var allNotes = {
  all: () => {
    let added = data[0].students.map((val) => {
      let base2 = val;
      let exurlBulder = `${urlBulder}/${base2.gitHub}/${base2.repo}/${base2.fileName}`;
      return { ...base2, fileUrl: exurlBulder };
    });
    return added;
  }
};
var students = {
  findOne: (name) => {
    let info = data[0].students.find((val) => {
      return val.studentName === name;
    });
    let exurlBulder = `${urlBulder}/${info?.gitHub}/${info?.repo}/${info?.fileName}`;
    return { fileurl: exurlBulder, studentInfo: info };
  },
  findAll: (name) => {
    let info = data[0].students.filter((val) => {
      return val.studentName === name;
    });
    let added = info.map((val) => {
      let exurlBulder = `${urlBulder}/${val?.gitHub}/${val?.repo}/${val?.fileName}`;
      return { ...val, fileUrl: exurlBulder };
    });
    return added;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  allNotes,
  students
});
